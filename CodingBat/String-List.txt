CodingBat String-1
--------------------------------------------
Given a string name, e.g. "Bob", return a greeting of the form "Hello Bob!".


hello_name('Bob') → 'Hello Bob!'
hello_name('Alice') → 'Hello Alice!'
hello_name('X') → 'Hello X!'

-----------------------
Solution:
-----------------------
def hello_name(name):
  return 'Hello ' + name + '!'


-----------------------------------------------------------------------

Given two strings, a and b, return the result of putting them together in the order abba, e.g. "Hi" and "Bye" returns "HiByeByeHi".


make_abba('Hi', 'Bye') → 'HiByeByeHi'
make_abba('Yo', 'Alice') → 'YoAliceAliceYo'
make_abba('What', 'Up') → 'WhatUpUpWhat'

-----------------------
Solution:
-----------------------
def make_abba(a, b):
  return a + b + b + a
----------------------------------------------------------------------------

The web is built with HTML strings like "<i>Yay</i>" which draws Yay as italic text. In this example, the "i" tag makes <i> and </i> which surround the word "Yay". Given tag and word strings, create the HTML string with tags around the word, e.g. "<i>Yay</i>".


make_tags('i', 'Yay') → '<i>Yay</i>'
make_tags('i', 'Hello') → '<i>Hello</i>'
make_tags('cite', 'Yay') → '<cite>Yay</cite>'

-----------------------
Solution:
-----------------------
def make_tags(tag, word):
  return '<' + tag + '>' + word + '</' + tag + '>'

------------------------------------------------------------------------------------------------------------------


Given an "out" string length 4, such as "<<>>", and a word, return a new string where the word is in the middle of the out string, e.g. "<<word>>".

make_out_word('<<>>', 'Yay') → '<<Yay>>'
make_out_word('<<>>', 'WooHoo') → '<<WooHoo>>'
make_out_word('[[]]', 'word') → '[[word]]'

-----------------------
Solution:
-----------------------
def make_out_word(out, word):
  return out[:2] + word + out[2:]

--------------------------------------------------------------------------------
Given a string, return a new string made of 3 copies of the last 2 chars of the original string. The string length will be at least 2.


extra_end('Hello') → 'lololo'
extra_end('ab') → 'ababab'
extra_end('Hi') → 'HiHiHi'

-----------------------
Solution:
-----------------------
def extra_end(str):
    return str[-2:] + str[-2:] + str[-2:]

---------------------------------------------------------------------------------------
Given a string, return the string made of its first two chars, so the String "Hello" yields "He". If the string is shorter than length 2, return whatever there is, so "X" yields "X", and the empty string "" yields the empty string "".


first_two('Hello') → 'He'
first_two('abcdefg') → 'ab'
first_two('ab') → 'ab'
-----------------------
Solution:
-----------------------
def first_two(str):
  if len(str) < 2:
    result = str
  else:
    result = str[:2]
  return result


--------------------------------------------------------------------------------------------


Given a string of even length, return the first half. So the string "WooHoo" yields "Woo".


first_half('WooHoo') → 'Woo'
first_half('HelloThere') → 'Hello'
first_half('abcdef') → 'abc'


-----------------------
Solution:
-----------------------
def first_half(str):
  result = str[:len(str)/2]
  return result


---------------------------------------------------------------------------
Given a string, return a version without the first and last char, so "Hello" yields "ell". The string length will be at least 2.


without_end('Hello') → 'ell'
without_end('java') → 'av'
without_end('coding') → 'odin'

-----------------------
Solution:
-----------------------
def without_end(str):
  return str[1:-1]

-------------------------------------------------------------------------------
Given 2 strings, a and b, return a string of the form short+long+short, with the shorter string on the outside and the longer string on the inside. The strings will not be the same length, but they may be empty (length 0).


combo_string('Hello', 'hi') → 'hiHellohi'
combo_string('hi', 'Hello') → 'hiHellohi'
combo_string('aaa', 'b') → 'baaab'

-----------------------
Solution:
-----------------------
def combo_string(a, b):
  if len(a) < len(b):
    return a + b + a
  else:
    return b + a + b

--------------------------------------------------------------------


Given 2 strings, return their concatenation, except omit the first char of each. The strings will be at least length 1.


non_start('Hello', 'There') → 'ellohere'
non_start('java', 'code') → 'avaode'
non_start('shotl', 'java') → 'hotlava'

-----------------------
Solution:
-----------------------
def non_start(a, b):
  result = ""
  result = result + a[1:] + b[1:]
  return result

-------------------------------------------------------------------------------------

Given a string, return a "rotated left 2" version where the first 2 chars are moved to the end. The string length will be at least 2.


left2('Hello') → 'lloHe'
left2('java') → 'vaja'
left2('Hi') → 'Hi'

-----------------------
Solution:
-----------------------
def left2(str):
  if len(str) < 2:
    return str
  else:
    return str[2:] + str[:2]


--------------------------------------------------------------------------------------------------------------------

CodingBat List-1
-----------------------------------------

Given an array of ints, return True if 6 appears as either the first or last element in the array. The array will be length 1 or more.


first_last6([1, 2, 6]) → True
first_last6([6, 1, 2, 3]) → True
first_last6([13, 6, 1, 2, 3]) → False

-----------------------
Solution:
-----------------------
def first_last6(nums):
  if nums[0] == 6 or nums[len(nums) - 1] == 6:
    return True
  else:
    return False


--------------------------------------------------------
Given an array of ints, return True if the array is length 1 or more, and the first element and the last element are equal.


same_first_last([1, 2, 3]) → False
same_first_last([1, 2, 3, 1]) → True
same_first_last([1, 2, 1]) → True

-----------------------
Solution:
-----------------------
def same_first_last(nums):
  if len(nums) >= 1:
    if nums[0] == nums[- 1]:
      return True
    else:
      return False
  return False
  

-------------------------------------------------------------------------
Given 2 arrays of ints, a and b, return True if they have the same first element or they have the same last element. Both arrays will be length 1 or more.


common_end([1, 2, 3], [7, 3]) → True
common_end([1, 2, 3], [7, 3, 2]) → False
common_end([1, 2, 3], [1, 3]) → True


-----------------------
Solution:
-----------------------
def common_end(a, b):
  if len(a)>=1 and len(b)>=1:
    if a[0] == b[0] or a[-1] == b[-1]:
      return True
    return False
  return False


---------------------------------------------------------------------------------------

Given an array of ints length 3, return the sum of all the elements.


sum3([1, 2, 3]) → 6
sum3([5, 11, 2]) → 18
sum3([7, 0, 0]) → 7

-----------------------
Solution:
-----------------------
def sum3(nums):
  return sum(nums)


---------------------------------------------------------------------------

Given an array of ints length 3, return an array with the elements "rotated left" so {1, 2, 3} yields {2, 3, 1}.


rotate_left3([1, 2, 3]) → [2, 3, 1]
rotate_left3([5, 11, 9]) → [11, 9, 5]
rotate_left3([7, 0, 0]) → [0, 0, 7]

-----------------------
Solution:
-----------------------

def rotate_left3(nums):
  return nums[1:] + [nums[0]]


-----------------------------------------------------------------------------

Given an array of ints length 3, return a new array with the elements in reverse order, so {1, 2, 3} becomes {3, 2, 1}.


reverse3([1, 2, 3]) → [3, 2, 1]
reverse3([5, 11, 9]) → [9, 11, 5]
reverse3([7, 0, 0]) → [0, 0, 7]


-----------------------
Solution:
-----------------------
def reverse3(nums):
  nums.reverse()
  return nums


---------------------------------------------------------------------------

Given an array of ints length 3, figure out which is larger, the first or last element in the array, and set all the other elements to be that value. Return the changed array.


max_end3([1, 2, 3]) → [3, 3, 3]
max_end3([11, 5, 9]) → [11, 11, 11]
max_end3([2, 11, 3]) → [3, 3, 3]

-----------------------
Solution:
-----------------------
def max_end3(nums):
  big = max(nums[0], nums[2])
  nums[0] = big
  nums[1] = big
  nums[2] = big
  return nums

----------------------------------------------------------------------------

Given an array of ints, return the sum of the first 2 elements in the array. If the array length is less than 2, just sum up the elements that exist, returning 0 if the array is length 0.


sum2([1, 2, 3]) → 3
sum2([1, 1]) → 2
sum2([1, 1, 1, 1]) → 2

-----------------------
Solution:
-----------------------
def sum2(nums):
  if len(nums) == 1:
    return nums[0]
  if len(nums) == 0:
    return 0
  else:
    sum = nums[0] + nums[1]
    return sum

-----------------------------------------------------------------------------------------
Given 2 int arrays, a and b, each length 3, return a new array length 2 containing their middle elements.


middle_way([1, 2, 3], [4, 5, 6]) → [2, 5]
middle_way([7, 7, 7], [3, 8, 0]) → [7, 8]
middle_way([5, 2, 9], [1, 4, 5]) → [2, 4]

-----------------------
Solution:
-----------------------
def middle_way(a, b):
  middle_a = a[1]
  middle_b = b[1]
  return  [middle_a] + [middle_b]


------------------------------------------------------------------------------------

Given an array of ints, return a new array length 2 containing the first and last elements from the original array. The original array will be length 1 or more.


make_ends([1, 2, 3]) → [1, 3]
make_ends([1, 2, 3, 4]) → [1, 4]
make_ends([7, 4, 6, 2]) → [7, 2]


-----------------------
Solution:
-----------------------
def make_ends(nums):
    return [nums[0]] + [nums[-1]]


--------------------------------------------------------------------------------------

Given an int array length 2, return True if it contains a 2 or a 3.


has23([2, 5]) → True
has23([4, 3]) → True
has23([4, 5]) → False

-----------------------
Solution:
-----------------------
def has23(nums):
  if 2 in nums or 3 in nums:
    return True
  else:
    return False

-----------------------------------------------------------------------------------------------

When squirrels get together for a party, they like to have cigars. A squirrel party is successful when the number of cigars is between 40 and 60, inclusive. Unless it is the weekend, in which case there is no upper bound on the number of cigars. Return True if the party with the given values is successful, or False otherwise.


cigar_party(30, False) → False
cigar_party(50, False) → True
cigar_party(70, True) → True

-----------------------
Solution:
-----------------------
def cigar_party(cigars, is_weekend):
  if is_weekend:
    return (cigars >= 40)
  if not is_weekend:
    return (cigars >= 40 and cigars <= 60)
  return False

----------------------------------------------------------------------------------------------


You and your date are trying to get a table at a restaurant. The parameter "you" is the stylishness of your clothes, in the range 0..10, and "date" is the stylishness of your date's clothes. The result getting the table is encoded as an int value with 0=no, 1=maybe, 2=yes. If either of you is very stylish, 8 or more, then the result is 2 (yes). With the exception that if either of you has style of 2 or less, then the result is 0 (no). Otherwise the result is 1 (maybe).


date_fashion(5, 10) → 2
date_fashion(5, 2) → 0
date_fashion(5, 5) → 1

-----------------------
Solution:
-----------------------
def date_fashion(you, date):
  if you <= 2 or date <= 2:
    return 0
  elif you >= 8 or date >= 8:
    return 2
  else:
    return 1

------------------------------------------------------------------------------------------------




